{"version":3,"sources":["res/date/cs-date.js"],"names":[],"mappings":"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","file":"res/date/cs-date.js","sourcesContent":["var MonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\r\n\r\nimport {customElement, bindable, bindingMode} from 'aurelia-framework';\r\nimport {CalendarPopup} from './calendar-popup';\r\nimport * as chs from '../chs';\r\n\r\n\r\n\r\n@customElement('cs-date')\r\n@bindable({name              : 'value',\r\n           attribute         : 'value',\r\n           changeHandler     : 'valueChanged',\r\n           defaultBindingMode: bindingMode.twoWay,\r\n           defaultValue      : null\r\n})\r\nexport class CsDate\r\n{\r\n    static defaultOps =\r\n    {\r\n        format : \"ISO\"             //Format date strings are expected to be in. ISO=YYYY-MM-DD, USA=M/D/YYYY\r\n    };\r\n    \r\n    static inject = [Element, CalendarPopup];\r\n    constructor(element, calendar)\r\n    {\r\n        this.element  = element;\r\n        this.calendar = calendar;\r\n    }\r\n    \r\n    \r\n    //Lifecycle hooks\r\n    //-------------------------------------------------------------------------------------------------------------------------------------------\r\n    bind(bindingContext)   //Invoked when the databinding engine binds the view\r\n    {\r\n        var self = this, el = self.element;\r\n        self.ops = chs.extend({}, CsDate.defaultOps);\r\n        \r\n        el.classList.add(\"cs-date\");\r\n        el.classList.add(\"cs-ctrl\");\r\n        \r\n        //Set options from attributes\r\n        self.ops.format   = el.getAttribute(\"format\") || self.ops.format;\r\n        self.ops.required = el.hasAttribute(\"required\");\r\n        \r\n        self.updateInputValue();\r\n    }\r\n    unbind()\r\n    {\r\n        console.log(\"Date unbound\");\r\n    }\r\n    \r\n    \r\n    //Binding change handlers\r\n    //-------------------------------------------------------------------------------------------------------------------------------------------\r\n    valueChanged(newVal)\r\n    {\r\n        console.log(\"Date value changed\");\r\n        this.updateInputValue();\r\n    }\r\n    \r\n   \r\n    \r\n    //Event handlers\r\n    //-------------------------------------------------------------------------------------------------------------------------------------------\r\n    onInput()\r\n    {\r\n        console.log(\"Date inputValue changed\");\r\n        var self = this, txt = self.inputValue;\r\n        \r\n        if(!txt)   //If input is blank, set date value to null\r\n        {\r\n            self.value = null;\r\n            return; \r\n        } \r\n        \r\n        //If date ented is valid, assign the new date value\r\n        var dt = parseDateStr(txt, self.ops.format);\r\n        if(dt) { self.value = dt; }\r\n    }\r\n    \r\n    \r\n    //\r\n    updateInputValue()\r\n    {\r\n        var self = this, dt = self.value;\r\n        if(!self.value) { self.inputValue = \"\"; return; }\r\n        \r\n        if(this.ops.format == \"ISO\")\r\n        {\r\n            self.inputValue = dt.getFullYear() + \"-\" + pad2(dt.getMonth() + 1) + \"-\" + pad2(dt.getDate());\r\n        }\r\n        else   //USA\r\n        {\r\n            self.inputValue = (dt.getMonth() + 1) + \"/\" + dt.getDate() + \"/\" + dt.getFullYear();\r\n        }\r\n    }\r\n  \r\n}\r\n\r\n\r\n\r\n//Pads the given value with a 0 as necessary to ensure it is 2 digits\r\nfunction pad2(num)\r\n{\r\n    var s = \"0\" + num;\r\n    return s.substr(s.length - 2);\r\n}\r\n\r\n//Returns a date object if the given date string matches the given format & is a valid date. Returns null otherwise.\r\nfunction parseDateStr(txt, fmt)\r\n{\r\n    var year, month, day, parts, maxDays;\r\n    \r\n    if(!txt) { return null; }\r\n    \r\n    if(fmt == \"ISO\")          //ISO = YYYY-MM-DD\r\n    {\r\n        if(txt.length != 10) { return null; }\r\n        year  = Number(txt.substr(0, 4));\r\n        month = Number(txt.substr(5, 2));\r\n        day   = Number(txt.substr(8, 2));\r\n    }\r\n    else                      //USA = M/D/YYYY             \r\n    {\r\n        parts = txt.split(/[\\/\\.-]/);   //Allow / . - as seperators\r\n        if(parts.length != 3) { return null; }\r\n        month = Number(parts[0]);\r\n        day   = Number(parts[1]);\r\n        year  = Number(parts[2]);\r\n    }\r\n\r\n\r\n    //Run some checks\r\n    if(!(month > 0 && day > 0 && year > 0)) { return null; }  //Ensure all date parts are positive numbers\r\n    if(month > 12)                          { return null; }  //Ensure a valid month #   \r\n    \r\n    \r\n    //Get max days in the month\r\n    maxDays = MonthDays[month-1];\r\n    if(month == 2)                     //Check for leap year in case of Feb\r\n    {\r\n        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0))  //If leap year\r\n        {\r\n            maxDays = 29;\r\n        }\r\n    }\r\n    if(day > maxDays) { return null; }  //Ensure valid day\r\n\r\n    return new Date(year, month-1, day);\r\n}"],"sourceRoot":"/source/"}